
html {
    scroll-behavior: smooth;
    scroll-padding-top: 10vh;
}

body {
    background-color: $white;
    font-family: 'Montserrat', sans-serif;
    color: $dark;
    font-size: clamp(14px, 0.83vw, 18px);
}

main {
    overflow: hidden;
}

@font-face {
    font-family: 'Krylon';
    src: url('../font/krylon.woff') format('woff');
}

h1, h2 {
    font-family: 'Krylon', sans-serif;
}


a {
    text-decoration: none;
    color: inherit;
    cursor: pointer;
}

h1 {
    font-size: calculate-clamp(30, 64);
    font-weight: 500;
}

h2 {
    font-size: calculate-clamp(40, 50);
    font-weight: 500;
}

h3 {
    font-size: 1.6rem;
    font-weight: 500;
}

.h3 {
    font-size: 1rem;
}

h4 {
    font-size: 1.4rem;
    font-weight: 500;
}

h5 {
    font-size: 1.2rem;
    font-weight: 500;
    margin: 0;
}

h1,h2,h3,h4,a,p,li {
    line-height: 1.5;
}

ul {
    list-style: none; 
    padding: 0;
    margin: 0;
  }

$breakpoints: (
  'mobile':  480px,
  'small': 768px,
  'tablet': 1024px,
  'laptop':  1200px,
  'large': 1440px,
  'fullhd': 1920px
) !default;

@mixin responsive($breakpoint) {
    // If the key exists in the map
    @if map-has-key($breakpoints, $breakpoint) {
      // Prints a media query based on the value
      @media (max-width: map-get($breakpoints, $breakpoint)) {
        @content;
      }
    }
   
    // If the key doesn't exist in the map
    @else {
      @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
          + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}




$container: 80vw;
$containerMobile: 90vw;

.container {
    width: min($container, 1600px);
    margin: 0 auto;
    position: relative;
    @include responsive('tablet') {
        width: min($containerMobile, 900px);
    }
}

.container-big {
    @extend .container;
    width: min(85vw, 1600px);

    @include responsive('small') {
        width: min(90vw, 768px);
    }
}

@media screen and (max-width: 782px) {
    html {
        margin-top: 0px !important;
    }
}

.gridCols1, .gridCols2, .gridCols3, .gridCols4 {
    display: grid;
}

.gridCols1{
    grid-template-columns: repeat(1, 1fr);
    gap: 42px;
}

.gridCols2{
    grid-template-columns: repeat(2, 1fr);
    gap: 42px;
}

.gridCols3 {
    grid-template-columns: repeat(3, 1fr);
    gap: 42px;
}

.gridCols4 {
    grid-template-columns: repeat(4, 1fr);
    gap: 42px;
}

.gridCols5 {
    grid-template-columns: repeat(4, 1fr);
}

.span4 {
    grid-column: span 4;
}

.span3 {
    grid-column: span 3;
}

.span2 {
    grid-column: span 2;
}

.span1 {
    grid-column: span 1;
}

.glow {
    z-index: -2;
    position: absolute;
    box-shadow: 0 0 600px 800px $creamy-glow;
}

.pos-rel {
    position: relative;
}

@include responsive('tablet') {
    .gridCols2, .gridCols3, .gridCols4 {
        grid-template-columns: 1fr;
    }

    .span1, .span2, .span3, .span4 {
        grid-column: span 1;
    }
}

@mixin transition($property...){
    transition-property: $property;
    -webkit-transition-property: $property;
    -moz-transition-property: $property;
    -ms-transition-property: $property;
    -o-transition-property: $property;

    transition-timing-function: ease-in-out;
    -webkit-transition-timing-function: ease-in-out;
    -moz-transition-timing-function: ease-in-out;
    -ms-transition-timing-function: ease-in-out;
    -o-transition-timing-function: ease-in-out;
    
    transition-duration: .3s;
    -webkit-transition-duration: .3s;
    -moz-transition-duration: .3s;
    -ms-transition-duration: .3s;
    -o-transition-duration: .3s;
}

.fontGold {
    color: $gold;
}

.button {
    display: block;
    width: fit-content;
    padding: 13px 65px;
    background-color: $white;
    border: 1px solid $dark;
    transition: all .3s ease-in-out;
    -webkit-transition: all .3s ease-in-out;
    -moz-transition: all .3s ease-in-out;
    -ms-transition: all .3s ease-in-out;
    -o-transition: all .3s ease-in-out;
}

.button:hover {
    background-color: $gold;
}

.line {
    position: fixed;
    z-index: -1;
    top: 0;
    height: 100%;
    width: 0.5px;
    background-color: $grey;
}

.l-right {
    right: 5vw;
}

.l-left {
    left: 5vw;
}

@include responsive('small') {
    .line {
        display: none;
    }
}